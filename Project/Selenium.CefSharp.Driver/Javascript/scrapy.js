
// Generated by CoffeeScript 1.6.3
// except getCssSelectorOF, getElementId and getPathTo handmade customizations
// The code for getCssSelectorOF was partially borrowed from chromium project:
// https://chromium.googlesource.com/chromium/src.git
//

(function () {
    if (window.__seleniumCefSharpDriverWindow) return;

    window.__seleniumCefSharpDriverWindow = (function () {
        const dataSetKey = 'selemniumCefSharpDriverRef';
        const attributeDataSetkey = 'data-' + dataSetKey.replace(/([A-Z])/g, (s) => {
            return '-' + s.charAt(0).toLowerCase();
        });
        let id = 1;
        return {
            entryElement(element) {
                if (!element) return -1;
                const current = element.dataset[dataSetKey];
                if (current) return current;
                id += 1;
                element.dataset[dataSetKey] = id;
                return id;
            },
            getElementByEntryId(id) {
                const result = document.querySelector(`[${attributeDataSetkey}='${id}']`);
                if (!result) {
                    throw 'EntriedElementNotFound';
                }
                return result;
            },
            getElementsByXPath(xpath, contextNode) {
                const result = document.evaluate(xpath, contextNode || document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
                const nodes = [];
                for (let i = 0; i < result.snapshotLength; i++) {
                    nodes.push(result.snapshotItem(i));
                }
                return nodes;
            },
            isUndefOrNull(value) {
                return typeof value === 'undefined' || value === null;
            }
        };
    })();

    if (typeof console == 'undefined' || console == null || typeof console.log == 'undefined' || typeof console.warn == 'undefined') {
        var iframe = document.createElement("iframe");
        document.body.appendChild(iframe);
        console = iframe.contentWindow.console;
        iframe.contentWindow.display = "none";
    }
    var addStyle, record, getCssSelectorOF, getElementId, getPathTo, highlightEle, prev, pseudoGuid;
    var mouseoverHandler, clickAtHandler, loadHandler;

    // var scrollHandler;
    var ELEMENT_NODE = 1;


    pseudoGuid = function () {
        var result;
        result = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        result = result.replace(/[xy]/g, function (re_match) {
            var random_value, replacement;
            random_value = Math.random() * 16 | 0;
            replacement = re_match === 'x' ? random_value : random_value & 0x3 | 0x8;
            return replacement.toString(16);
        });
        return result;
    };

    // http://stackoverflow.com/questions/6743912/get-the-pure-text-without-html-element-by-javascript
    getText = function (element, addSpaces) {
        var i, result, text, child;
        if (element.childNodes && element.childNodes > 1) {
            result = '';
            for (i = 0; i < element.childNodes.length; i++) {
                child = element.childNodes[i];
                text = null;
                // NOTE we only collapsing child node values when there is more than one child
                if (child.elementType === 1) {
                    text = getText(child, addSpaces);
                } else if (child.elementType === 3) {
                    text = child.elementValue;
                }
                if (text) {
                    if (addSpaces && /\S$/.test(result) && /^\S/.test(text)) text = ' ' + text;
                    result += text;
                }
            }
        } else {
            result = element.innerText || element.textContent || '';
        }
        result = result.replace(/\r?\n/g, ' ').replace(/\s+/g, ' ').replace(/^\s+/, '').replace(/\s+$/, '');
        return result;
    };

    getElementId = function (element) {
        var selector = '';

        if (element instanceof Element && element.nodeType === ELEMENT_NODE && element.id) {
            selector = element.id;
        }
        return selector;
    };

    // The initial version code of getCssSelectorOF was partially borrowed from chromium project:
    // https://chromium.googlesource.com/chromium/src.git
    getCssSelectorOF = function (element) {
        var specialAttributesArray = ['href', 'src', 'title', 'alt', 'name', 'value', 'type', 'action', 'onclick'];
        if (!(element instanceof Element))
            return;
        var path = [];
        while ((element instanceof Element) && element.nodeType === ELEMENT_NODE) {
            var selector = element.nodeName.toLowerCase();
            if (element.id && path.length != 0) {
                if (element.id.indexOf('-') > -1) {
                    selector += '[id = "' + element.id + '"]';
                } else {
                    selector += '#' + element.id;
                }
                path.unshift(selector);
                break;
            } else if (element.className) {
                var attr = element.className;
                // ignore className attributes with special characters
                if (attr.indexOf('(') == -1 /* && attr.indexOf('*') == -1 && attr.indexOf('.') == -1 */) {
                    selector += '.' + attr.replace(/^\s+/, '').replace(/\s+$/, '').replace(/\s+/g, '.');
                }
            } else {
                var element_sibling = element;
                var sibling_cnt = 1;
                while (element_sibling = element_sibling.previousElementSibling) {
                    if (element_sibling.nodeName.toLowerCase() == selector)
                        sibling_cnt++;
                }
                if (sibling_cnt != 1)
                    selector += ':nth-of-type(' + sibling_cnt + ')';
            }
            var arrayLength = specialAttributesArray.length;
            var attribute_conditions_postfix = [];
            var attribute_condition = '';
            var prefix = '';
            var i;
            // refactored to look similarly with getCssSelectorOF and getPathTo
            for (i = 0; i < arrayLength; i++) {
                specialAttribute = specialAttributesArray[i];
                attribute_condition = probeAttribute(element, specialAttribute, prefix);
                if (attribute_condition) {
                    attribute_conditions_postfix.push(attribute_condition);
                }
            }
            if (attribute_conditions_postfix.length > 0) {
                for (i = 0; i < attribute_conditions_postfix.length; i++) {
                    selector += '[ ' + attribute_conditions_postfix[i] + ' ]';
                }
            }
            path.unshift(selector);
            element = element.parentNode;
        }
        return path.join(' > ');
    };

    // prefix : '@' for xpath, empty for css.
    probeAttribute = function (element, attributeName, prefix) {
        if (element.hasAttribute(attributeName)) {
            var attribute = element.getAttribute(attributeName);
            if (attribute != null && ((typeof attribute) != 'undefined') && attribute !== '') {
                if (attribute.indexOf('hover') != -1 || attribute.indexOf('highlight') != -1) {

                    if (attribute.indexOf('hover') != -1 && attribute.trim() == "hover") {
                        return null;
                    }

                    if (attribute.indexOf('highlight') != -1 && attribute.trim() == "highlight") {
                        return null;
                    }

                    return prefix + attributeName + ' = "' + attribute.replace(' hover', '').replace(' highlight', '') + '"';
                }
                else {
                    return prefix + attributeName + ' = "' + attribute + '"';
                }
            }
            return prefix + attributeName + ' = "' + attribute + '"';
        } else {
            return null;
        }
    };

    getPathTo = function (element, depth) {
        if (null == element) {
            console.error("getPathTo element is null!");
            return null;
        }
        depth = depth + 1;
        var element_sibling, siblings, cnt, sibling_count;
        var elementTagName = element.tagName.toLowerCase();
        if (element === document.body) {
            return '/html/' + elementTagName;
        }

        sibling_count = 0;
        siblings = element.parentNode.childNodes;
        siblings_length = siblings.length;
        for (cnt = 0; cnt < siblings_length; cnt++) {
            element_sibling = siblings[cnt];

            if (element_sibling.nodeType !== ELEMENT_NODE) { // not ELEMENT_NODE
                continue;
            }

            if (element_sibling === element) {
                var attributeClass = probeAttribute(element, "class", '@');
                if (attributeClass !== null && attributeClass !== '') {
                    return getPathTo(element.parentNode, depth) + '/' + elementTagName + '[' + attributeClass + ']';
                }
                else {
                    return getPathTo(element.parentNode, depth) + '/' + elementTagName;
                }
            }
            if (element_sibling.nodeType === 1 && element_sibling.tagName.toLowerCase() === elementTagName) {
                sibling_count++;
            }
        }
    };


    getProtractorLocators = function (element) {
        var specialAttributesArray = ['ng-repeat', 'ng-binding', 'ng-model', 'ng-option'];
        var attribute_postfix = [];
        var postfix = '';
        var arrayLength = specialAttributesArray.length;
        for (var i = 0; i < arrayLength; i++) {
            specialAttribute = specialAttributesArray[i];
            postfix = probeAttribute(element, specialAttribute, '@');
            if (postfix) {
                attribute_postfix.push(postfix);
            }
        }
    };

    record = function (cmd, target, value) {
        if (null == target) {
            console.error("record target is null!");
            return;
        }
        var jsonData, xpath, css_selector, id, elementText, tagName, relative_x, relative_y, width, height;

        if (target != "") {
            xpath = getPathTo(target, 0);

            css_selector = getCssSelectorOF(target);
            var dummy = getProtractorLocators(target);
            id = getElementId(target);
            elementText = getText(target, true);
            tagName = target.tagName;
            rectInfo = target.getBoundingClientRect();
            relative_x = rectInfo.left;
            relative_y = rectInfo.top;
            width = rectInfo.width;
            height = rectInfo.height;
        }

        jsonData = {
            'Command': cmd,
            'Caller': 'Spider',
            'CommandId': pseudoGuid(),
            'CommandValue': value,
            'CssSelector': css_selector,
            'XPathValue': xpath,
            'ElementId': id,
            'ElementText': elementText,
            'ElementTagName': tagName,
            'Relative_X': relative_x,
            'Relative_Y': relative_y,
            'Width': width,
            'Height': height
        };
        var myJSONText = JSON.stringify(jsonData).replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
        document.swdpr_command.push(myJSONText);
        if (typeof console !== 'undefined' && console !== null) {
            return console.warn('ScrapyCommand:' + myJSONText);
        }
    };

    addStyle = function (css) {
        var head, style;
        head = document.getElementsByTagName('head')[0];
        style = document.createElement('style');
        style.type = 'text/css';
        if (style.styleSheet) {
            style.styleSheet.cssText = css;
        } else {
            style.appendChild(document.createTextNode(css));
        }
        head.appendChild(style);
    };

    prev = void 0;
    highlightEle = function (event) {
        if (document.__seleniumCefSharpDriverDocument == null) {
            return;
        }
        if (event.target === document.body || prev === event.target) {
            return;
        }
        if (prev) {
            prev.className = prev.className.replace(/\s?\bhighlight\b/, '');
            prev = void 0;
        }
        if (event.target) {
            prev = event.target;
            prev.className += ' highlight';
        }
        setTimeout(function () { event.target.classList.remove('highlight'); }, 1000);
    };


    mouseoverHandler = function (event) {
        if (document.__seleniumCefSharpDriverDocument == null) {
            return;
        }
        if (event.target === document.body || prev === event.target) {
            return;
        }
        if (prev) {
            prev.className = prev.className.replace(/\s?\bhighlight\b/, '');
            prev = void 0;
        }
        if (event.target) {
            prev = event.target;
            prev.className += " highlight";
        }
    };

    clickAtHandler = function (event) {
        event = event || window.event;
        if (document.SCRAPING_MODE && event.button == 0 && event.isTrusted && event.ctrlKey) {
            if (event.preventDefault) {
                event.preventDefault();
            }
            event.returnValue = false;
            if (event.stopPropagation) {
                event.stopPropagation();
            } else {
            }
            event.cancelBubble = true;
            if (window.event) {
                window.event.cancelBubble = true;
                window.event.returnValue = false;
            }
            record("scrapy", event.target, event.currentTarget.URL);
            highlightEle(event);
            return false;
        }
    };

    //loadHandler = function (event) {
    //    console.log(document.SCRAPING_MODE);
    //    if (document.SCRAPING_MODE) {
    //        if (event.currentTarget.URL) {
    //            record("navigation", "", event.currentTarget.URL);
    //        }
    //    }
    //};



    __seleniumCefSharpDriverDocument = (function () {
        function __seleniumCefSharpDriverDocument() { }


        __seleniumCefSharpDriverDocument.prototype.removeEventListener = function () {
            document.removeEventListener('mousemove', mouseMovehandler, true);
            document.removeEventListener('click', clickAtHandler, true);
            //document.removeEventListener('load', loadHandler, true);

        };
        return __seleniumCefSharpDriverDocument;

    })();

    addStyle('.highlight { border: 2px solid green; !important}');

    /*
        Important!
        It wont work if the document has no body, such as top frameset pages.
    */

    if (document.body != null) {

        if (document.body.addEventListener) {
            document.addEventListener('mouseover', mouseoverHandler, true);
            document.addEventListener('click', clickAtHandler, true);
            //document.addEventListener('load', loadHandler, true);

        } else if (document.body.attachEvent) {
            document.body.attachEvent('mouseover', function (e) {
                return mouseoverHandler(e || window.event);
            });
            document.body.attachEvent('click', function (e) {
                return clickAtHandler(e || window.event);
            });
        } else {
            document.body.onmouseover = mouseoverHandler;
        }
        document.swdpr_command = [];

        document.SCRAPING_MODE = true;

        document.__seleniumCefSharpDriverDocument = new __seleniumCefSharpDriverDocument();

    } else {
        document.__seleniumCefSharpDriverDocument = "Document has no body tag :(";
    }

}).call(this);

